------------------------------------------------------------------------
-- Project ???
--
-- Sierpinski space
------------------------------------------------------------------------

module Topology.Core where

open import Agda.Primitive
open import Topology.PowerSet
open import Relation.Binary.PropositionalEquality
open import Function.Base 
open import Data.Product
open import Data.Unit
open import Data.Empty

------------------------------------------------------------------------
-- Topology on a set X
record topology {ℓ} (k m : Level) (X : Set ℓ) : Setω₁ where
    field
        Open : ℙ k X → Set m -- the open subsets of X
        ∅-open : Open (empty X)
        full-open : Open (full X)
        ∩-open : ∀ U V → Open U → Open V → Open (U ∩ V)
        union-open : ∀ {I : Set k} (S : I → ℙ k X) → (∀ i → Open (S i)) → Open (union S)

discrete-topology : {ℓ k : Level} (X : Set ℓ) → topology k lzero X
discrete-topology X =
    record
        { Open = λ _ → ⊤
        ; ∅-open = tt
        ; full-open = tt
        ; ∩-open = λ _ _ _ _ → tt
        ; union-open = λ _ _ → tt
        }

-- Trivial topology
indiscrete-topology : {ℓ k : Level} (X : Set ℓ) → topology k (ℓ ⊔ k) X
indiscrete-topology X =
    record
        { Open = λ U → ∀ x → U x → ∀ y → U y
        ; ∅-open = λ { p () y}
        ; full-open = λ p x y → 𝟙-intro
        ; ∩-open = λ U V OpenU OpenV x UVx z → (OpenU x (∩-⊆-left U V x UVx) z) ,
                                               (OpenV x (∩-⊆-right U V x UVx) z)
        ; union-open =
            λ { S Si-open x (i , xSi) y → i , Si-open i x xSi y }
        }

-- The topology generated by a family B of subsets closed under binary intersection
base : {ℓ k j : Level} {X : Set ℓ} {I : Set k}
    → (B : I → (ℙ j X))
    → ((x : X) → x ∈ union B)
    → (∀ {i j x} → x ∈ B i → x ∈ B j → Σ[ k ∈ I ] (x ∈ B k) × (B k ⊆ B i ∩ B j))
    → topology j (ℓ ⊔ k ⊔ j) X
base {ℓ = ℓ} {k = k} {j = j} {X = X} {I = I} B Bcovers Bbase =
  record
    { Open = Open'
    ; ∅-open = λ { () }
    ; full-open = λ {x} _ → (proj₁ (Bcovers x)) , ((λ y _ → 𝟙-intro) , proj₂ (Bcovers x))
    ; ∩-open = ∩-open'
    ; union-open = {!!}
    }
  where
    Open' : (U : X → Set j) → Set (ℓ ⊔ k ⊔ j)
    Open' = λ U → ∀ {x} → x ∈ U → Σ[ i ∈ I ] (B i ⊆ U) × x ∈ B i

    index-of : {x : X} {U : ℙ j X} → x ∈ U → Open' U → I
    index-of x∈U OpenU = proj₁ (OpenU x∈U)

    ∩-open' : (U V : ℙ j X) → Open' U → Open' V → Open' (U ∩ V)
    ∩-open' U V OpenU OpenV x∈U∩V = {!!}

    union-open' : {J : Set j} (S : J → ℙ j X) → ((m : J) → Open' (S m)) → Open' (union S)
    union-open' = {!!}
